from pyrogram import Client, filters
from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from pyrogram.errors import UserNotParticipant
from datetime import datetime
from motor.motor_asyncio import AsyncIOMotorClient
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# MongoDB setup
mongo_client = AsyncIOMotorClient(os.getenv('MONGODB_URI'))
db = mongo_client[os.getenv('DB_NAME')]
users_collection = db['users']

# Force sub channel
FORCE_SUB_CHANNEL = os.getenv('FORCE_SUB_CHANNEL')

async def check_subscription(client: Client, user_id: int) -> bool:
    """Check if user is subscribed to force sub channel."""
    try:
        member = await client.get_chat_member(FORCE_SUB_CHANNEL, user_id)
        return True
    except UserNotParticipant:
        return False
    except Exception as e:
        print(f"Error checking subscription: {str(e)}")
        return True  # Allow on error

async def force_sub_message():
    """Get force sub message with button."""
    button = [
        [InlineKeyboardButton(
            "üì¢ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶ú‡¶Ø‡¶º‡ßá‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®",
            url=f"https://t.me/{FORCE_SUB_CHANNEL.replace('@', '')}"
        )],
        [InlineKeyboardButton(
            "üîÑ Try Again",
            callback_data="checksub"
        )]
    ]
    
    text = (
        "‚ùå **‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§! ‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá‡¶∞ ‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø ‡¶®‡¶®‡•§**\n\n"
        "‡¶¨‡¶ü ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶ú‡¶Ø‡¶º‡ßá‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®‡•§\n"
        "‡¶ú‡¶Ø‡¶º‡ßá‡¶® ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶™‡¶∞ 'Try Again' ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®‡•§\n"
        "**üì∫ ‡¶ü‡¶ø‡¶â‡¶ü‡ßã‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶≤ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®:**\n"
        "‚Ä¢ https://www.youtube.com/watch?v=a35aefCCJTY"
    )
    
    return text, InlineKeyboardMarkup(button)

async def add_user(message: Message):
    """Add new user to database."""
    try:
        user = message.from_user
        
        # Check if user exists
        if not await users_collection.find_one({"user_id": user.id}):
            # Add new user
            user_data = {
                "user_id": user.id,
                "username": user.username,
                "first_name": user.first_name,
                "last_name": user.last_name,
                "joined_date": datetime.utcnow(),
                "last_used": datetime.utcnow()
            }
            await users_collection.insert_one(user_data)
        else:
            # Update last used
            await users_collection.update_one(
                {"user_id": user.id},
                {"$set": {"last_used": datetime.utcnow()}}
            )
            
    except Exception as e:
        print(f"Error adding user: {str(e)}")

async def start_command(client: Client, message: Message):
    """Handle /start command."""
    try:
        # Check force subscription
        if not await check_subscription(client, message.from_user.id):
            text, markup = await force_sub_message()
            await message.reply_text(
                text,
                reply_markup=markup,
                disable_web_page_preview=True
            )
            return
        
        # Add user to database
        await add_user(message)
        
        # Send welcome message
        await message.reply_text(
            "üëã **‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ!**\n"
            "**CloudPrint Team** ‡¶è‡¶∞ PDF ‡¶π‡ßá‡¶≤‡ßç‡¶™‡¶æ‡¶∞ ‡¶¨‡¶ü‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ‡•§\n\n"
            "**üìö ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶∏‡¶Æ‡ßÇ‡¶π:**\n\n"
            "**üî∞ PDF ‡¶ü‡ßÅ‡¶≤‡¶∏:**\n"
            "‚Ä¢ /merge - ‡¶è‡¶ï‡¶æ‡¶ß‡¶ø‡¶ï PDF ‡¶è‡¶ï‡¶§‡ßç‡¶∞‡ßá ‡¶ú‡ßã‡¶°‡¶º‡¶æ\n"
            "‚Ä¢ /invert - PDF ‡¶è‡¶∞ ‡¶°‡¶æ‡¶∞‡ßç‡¶ï ‡¶™‡ßá‡¶ú ‡¶á‡¶®‡¶≠‡¶æ‡¶∞‡ßç‡¶ü\n"
            "‚Ä¢ /inverts - ‡¶∏‡ßç‡¶Æ‡¶æ‡¶∞‡ßç‡¶ü ‡¶á‡¶®‡¶≠‡¶æ‡¶∞‡ßç‡¶ü + ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶™‡ßá‡¶ú ‡¶∞‡¶ø‡¶Æ‡ßÅ‡¶≠\n"
            "‚Ä¢ /invertsexp - ‡¶è‡¶ï‡ßç‡¶∏‡¶™‡ßá‡¶∞‡¶ø‡¶Æ‡ßá‡¶®‡ßç‡¶ü‡¶æ‡¶≤ ‡¶∏‡ßç‡¶Æ‡¶æ‡¶∞‡ßç‡¶ü ‡¶á‡¶®‡¶≠‡¶æ‡¶∞‡ßç‡¶ü\n"
            "‚Ä¢ /pages - PDF ‡¶è‡¶∞ ‡¶™‡ßá‡¶ú ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶ì ‡¶™‡ßç‡¶∞‡¶ø‡¶≠‡¶ø‡¶â\n"
            "‚Ä¢ /pdf - ‡¶ó‡ßÅ‡¶ó‡¶≤ ‡¶°‡ßç‡¶∞‡¶æ‡¶á‡¶≠ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶•‡ßá‡¶ï‡ßá PDF\n\n"
            "**üí∞ ‡¶™‡ßç‡¶∞‡¶ø‡¶®‡ßç‡¶ü‡¶ø‡¶Ç ‡¶ü‡ßÅ‡¶≤‡¶∏:**\n"
            "‚Ä¢ /price - ‡¶™‡ßç‡¶∞‡¶ø‡¶®‡ßç‡¶ü‡¶ø‡¶Ç ‡¶Æ‡ßÇ‡¶≤‡ßç‡¶Ø ‡¶π‡¶ø‡¶∏‡¶æ‡¶¨\n\n"
            "**‚öôÔ∏è ‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°:**\n"
            "‚Ä¢ /allcancel - ‡¶ö‡¶≤‡¶Æ‡¶æ‡¶® ‡¶ï‡¶æ‡¶ú ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤\n\n"
            "**üîç ‡¶¨‡¶ø‡¶∂‡ßá‡¶∑ ‡¶¶‡ßç‡¶∞‡¶∑‡ßç‡¶ü‡¶¨‡ßç‡¶Ø:**\n"
            "‚Ä¢ PDF ‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã‡¶∞ ‡¶™‡¶∞ ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¶‡¶ø‡¶®\n"
            "‚Ä¢ ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®\n"
            "‚Ä¢ ‡¶¨‡¶°‡¶º ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶ï‡ßç‡¶∑‡ßá‡¶§‡ßç‡¶∞‡ßá ‡¶ï‡¶ø‡¶õ‡ßÅ‡¶ü‡¶æ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶≤‡¶æ‡¶ó‡¶¨‡ßá\n\n"
            "**üë• ‡¶∏‡¶π‡¶Ø‡ßã‡¶ó‡¶ø‡¶§‡¶æ‡¶Ø‡¶º:**\n"
            "‚Ä¢ @cloudprintonline\n\n"
            "**üì∫ ‡¶ü‡¶ø‡¶â‡¶ü‡ßã‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶≤ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®:**\n"
            "‚Ä¢ https://www.youtube.com/watch?v=a35aefCCJTY",
            disable_web_page_preview=True
        )
            
    except Exception as e:
        print(f"Error in start command: {str(e)}")
        await message.reply_text(
            "‚ùå **‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§! ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§**\n\n"
            "‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§"
        )

async def handle_force_sub_callback(client: Client, callback: CallbackQuery):
    """Handle force sub callback."""
    try:
        if callback.data != "checksub":
            return
            
        if not await check_subscription(client, callback.from_user.id):
            await callback.answer("‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶ñ‡¶®‡¶ì ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶ú‡¶Ø‡¶º‡ßá‡¶® ‡¶ï‡¶∞‡ßá‡¶®‡¶®‡¶ø!", show_alert=True)
            text, markup = await force_sub_message()
            await callback.message.edit_text(text, reply_markup=markup)
            return
            
        # User has joined, show start message
        await callback.message.delete()
        await start_command(client, callback.message)
    except Exception as e:
        print(f"Error handling force sub callback: {str(e)}") 
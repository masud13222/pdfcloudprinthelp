from pyrogram import Client, filters
from pyrogram.types import Message
from pyrogram.errors import FloodWait, InputUserDeactivated, UserIsBlocked, PeerIdInvalid
import asyncio
import os
from dotenv import load_dotenv
from .users import is_admin, users_collection

async def broadcast_command(client: Client, message: Message):
    """Handle /broadcast command to send message to all users."""
    try:
        # Check if user is admin
        if not await is_admin(message.from_user.id):
            await message.reply_text(
                "‚ùå **‡¶Ö‡¶®‡¶®‡ßÅ‡¶Æ‡ßã‡¶¶‡¶ø‡¶§ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏!**\n\n"
                "‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶è‡¶á ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®‡•§"
            )
            return
            
        # Get broadcast message
        if message.reply_to_message:
            broadcast_msg = message.reply_to_message
        else:
            # Get text after command
            if len(message.text.split(" ", 1)) < 2:
                await message.reply_text(
                    "‚ùå **‡¶≠‡ßÅ‡¶≤ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞!**\n\n"
                    "**‡¶∏‡¶†‡¶ø‡¶ï ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞:**\n"
                    "‚Ä¢ ‡¶ï‡ßã‡¶® ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡ßá ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá /broadcast\n"
                    "‚Ä¢ /broadcast ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü"
                )
                return
            broadcast_msg = message
            
        # Send status message
        status_msg = await message.reply_text(
            "üì§ **‡¶¨‡ßç‡¶∞‡¶°‡¶ï‡¶æ‡¶∏‡ßç‡¶ü ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...**\n\n"
            "‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§"
        )
        
        # Get all users
        all_users = users_collection.find({}, {"user_id": 1})
        
        # Initialize counters
        total_users = await users_collection.count_documents({})
        done = 0
        success = 0
        failed = 0
        blocked = 0
        deleted = 0
        
        async for user in all_users:
            done += 1
            try:
                if message.reply_to_message:
                    # Forward replied message
                    await broadcast_msg.forward(
                        chat_id=user["user_id"]
                    )
                else:
                    # Send text message
                    await client.send_message(
                        chat_id=user["user_id"],
                        text=broadcast_msg.text.split(" ", 1)[1]
                    )
                success += 1
                
            except FloodWait as e:
                await asyncio.sleep(e.value)
                # Retry after flood wait
                try:
                    if message.reply_to_message:
                        await broadcast_msg.forward(
                            chat_id=user["user_id"]
                        )
                    else:
                        await client.send_message(
                            chat_id=user["user_id"],
                            text=broadcast_msg.text.split(" ", 1)[1]
                        )
                    success += 1
                except:
                    failed += 1
                    
            except UserIsBlocked:
                blocked += 1
                failed += 1
                # Remove blocked user
                await users_collection.delete_one({"user_id": user["user_id"]})
                
            except InputUserDeactivated:
                deleted += 1
                failed += 1
                # Remove deleted user
                await users_collection.delete_one({"user_id": user["user_id"]})
                
            except PeerIdInvalid:
                failed += 1
                # Remove invalid user
                await users_collection.delete_one({"user_id": user["user_id"]})
                
            except Exception:
                failed += 1
                
            # Update status every 25 users
            if done % 25 == 0:
                try:
                    await status_msg.edit_text(
                        f"üì§ **‡¶¨‡ßç‡¶∞‡¶°‡¶ï‡¶æ‡¶∏‡ßç‡¶ü ‡¶ö‡¶≤‡¶õ‡ßá...**\n\n"
                        f"‚Ä¢ ‡¶Æ‡ßã‡¶ü ‡¶á‡¶â‡¶ú‡¶æ‡¶∞: {total_users:,}‡¶ú‡¶®\n"
                        f"‚Ä¢ ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶®: {done:,}‡¶ú‡¶®\n"
                        f"‚Ä¢ ‡¶∏‡¶´‡¶≤: {success:,}‡¶ú‡¶®\n"
                        f"‚Ä¢ ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•: {failed:,}‡¶ú‡¶®\n"
                        f"‚Ä¢ ‡¶¨‡ßç‡¶≤‡¶ï ‡¶ï‡¶∞‡ßá‡¶õ‡ßá: {blocked:,}‡¶ú‡¶®\n"
                        f"‚Ä¢ ‡¶è‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü: {deleted:,}‡¶ú‡¶®\n\n"
                        f"**üìä ‡¶Ö‡¶ó‡ßç‡¶∞‡¶ó‡¶§‡¶ø:** {done/total_users:.1%}"
                    )
                except:
                    pass
                    
            # Sleep to avoid flood
            await asyncio.sleep(0.1)
                
        # Send completion message
        await status_msg.edit_text(
            f"‚úÖ **‡¶¨‡ßç‡¶∞‡¶°‡¶ï‡¶æ‡¶∏‡ßç‡¶ü ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶®!**\n\n"
            f"‚Ä¢ ‡¶Æ‡ßã‡¶ü ‡¶á‡¶â‡¶ú‡¶æ‡¶∞: {total_users:,}‡¶ú‡¶®\n"
            f"‚Ä¢ ‡¶∏‡¶´‡¶≤: {success:,}‡¶ú‡¶®\n"
            f"‚Ä¢ ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•: {failed:,}‡¶ú‡¶®\n"
            f"‚Ä¢ ‡¶¨‡ßç‡¶≤‡¶ï ‡¶ï‡¶∞‡ßá‡¶õ‡ßá: {blocked:,}‡¶ú‡¶®\n"
            f"‚Ä¢ ‡¶è‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü: {deleted:,}‡¶ú‡¶®\n\n"
            f"‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶≤‡ßá‡¶ó‡ßá‡¶õ‡ßá: {int((done/total_users)*100)}%"
        )
            
    except Exception as e:
        await message.reply_text(
            "‚ùå **‡¶è‡¶∞‡¶∞!**\n\n"
            f"‡¶ï‡¶æ‡¶∞‡¶£: {str(e)}\n"
            "‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§"
        ) 
from pyrogram import Client, filters
from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from motor.motor_asyncio import AsyncIOMotorClient
import os
from dotenv import load_dotenv
from .users import is_admin

# Load environment variables
load_dotenv()

# MongoDB setup
mongo_client = AsyncIOMotorClient(os.getenv('MONGODB_URI'))
db = mongo_client[os.getenv('DB_NAME')]
settings_collection = db['group_settings']

async def get_settings_keyboard():
    """Get settings keyboard."""
    settings = await settings_collection.find_one({"_id": "bot_settings"}) or {}
    
    buttons = [
        [InlineKeyboardButton(
            f"üîó ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶´‡¶ø‡¶≤‡ßç‡¶ü‡¶æ‡¶∞ {'‚úÖ ‡¶ö‡¶æ‡¶≤‡ßÅ' if settings.get('link_filter') else '‚ùå ‡¶¨‡¶®‡ßç‡¶ß'}",
            callback_data="link_filter"
        )],
        [InlineKeyboardButton(
            f"üëã ‡¶ì‡¶Ø‡¶º‡ßá‡¶≤‡¶ï‡¶æ‡¶Æ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú {'‚úÖ ‡¶ö‡¶æ‡¶≤‡ßÅ' if settings.get('welcome_msg') else '‚ùå ‡¶¨‡¶®‡ßç‡¶ß'}", 
            callback_data="welcome_msg"
        )],
        [InlineKeyboardButton(
            "‚úèÔ∏è ‡¶ì‡¶Ø‡¶º‡ßá‡¶≤‡¶ï‡¶æ‡¶Æ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®",
            callback_data="set_welcome"
        )],
        [InlineKeyboardButton(
            f"‚è∞ ‡¶ì‡¶Ø‡¶º‡ßá‡¶≤‡¶ï‡¶æ‡¶Æ ‡¶ü‡¶æ‡¶á‡¶Æ: {settings.get('welcome_time', '60')} ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°",
            callback_data="welcome_time"
        )],
        [InlineKeyboardButton(
            f"üë• ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú {'‚úÖ ‡¶Ö‡¶ü‡ßã ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü' if settings.get('service_delete') else '‚ùå ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶¨‡¶®‡ßç‡¶ß'}", 
            callback_data="service_delete"
        )],
        [InlineKeyboardButton(
            "üìù WhatsApp ‡¶ï‡ßÄ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶°",
            callback_data="set_whatsapp"
        )],
        [InlineKeyboardButton(
            "üìû ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶ï‡ßÄ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶°",
            callback_data="set_number"
        )],
        [InlineKeyboardButton(
            "‚úâÔ∏è ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶ï‡ßÄ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶°",
            callback_data="set_text"
        )],
        [InlineKeyboardButton("üîÑ ‡¶∏‡¶¨ ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®", callback_data="reset_all")],
        [InlineKeyboardButton("‚ùå ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡ßÅ‡¶®", callback_data="close")]
    ]
    
    return InlineKeyboardMarkup(buttons)

async def get_settings_status():
    """Get current settings status."""
    settings = await settings_collection.find_one({"_id": "bot_settings"}) or {}
    
    status = (
        "**üî∞ ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏:**\n\n"
        f"‚Ä¢ **‡¶≤‡¶ü ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏:** {'‚úÖ ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶Ü‡¶õ‡ßá' if settings.get('is_active') else '‚ùå ‡¶¨‡¶®‡ßç‡¶ß ‡¶Ü‡¶õ‡ßá'}\n"
        f"‚Ä¢ **‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶´‡¶ø‡¶≤‡ßç‡¶ü‡¶æ‡¶∞:** {'‚úÖ ‡¶ö‡¶æ‡¶≤‡ßÅ' if settings.get('link_filter') else '‚ùå ‡¶¨‡¶®‡ßç‡¶ß'}\n"
        f"‚Ä¢ **‡¶ì‡¶Ø‡¶º‡ßá‡¶≤‡¶ï‡¶æ‡¶Æ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú:** {'‚úÖ ‡¶ö‡¶æ‡¶≤‡ßÅ' if settings.get('welcome_msg') else '‚ùå ‡¶¨‡¶®‡ßç‡¶ß'}\n"
        f"‚Ä¢ **‡¶ì‡¶Ø‡¶º‡ßá‡¶≤‡¶ï‡¶æ‡¶Æ ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü:** {settings.get('welcome_text', '‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡¶®‡¶ø')}\n"
        f"‚Ä¢ **‡¶ì‡¶Ø‡¶º‡ßá‡¶≤‡¶ï‡¶æ‡¶Æ ‡¶ü‡¶æ‡¶á‡¶Æ:** {settings.get('welcome_time', '60')} ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°\n"
        f"‚Ä¢ **‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú:** {'‚úÖ ‡¶Ö‡¶ü‡ßã ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü' if settings.get('service_delete') else '‚ùå ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶¨‡¶®‡ßç‡¶ß'}\n\n"
        f"**üìù ‡¶ï‡ßÄ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶ü‡ßá‡¶Æ‡¶™‡ßç‡¶≤‡ßá‡¶ü:**\n"
        f"‚Ä¢ **WhatsApp:** {settings.get('whatsapp_template', '‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡¶®‡¶ø')}\n"
        f"‚Ä¢ **‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞:** {settings.get('number_template', '‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡¶®‡¶ø')}\n"
        f"‚Ä¢ **‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü:** {settings.get('text_template', '‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡¶®‡¶ø')}"
    )
    
    return status

async def get_username_keyboard():
    """Get username setting keyboard."""
    buttons = [
        [InlineKeyboardButton("üîÑ ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü", callback_data="reset_username")],
        [InlineKeyboardButton("üîô ‡¶´‡¶ø‡¶∞‡ßá ‡¶Ø‡¶æ‡¶®", callback_data="back")]
    ]
    return InlineKeyboardMarkup(buttons)

async def uset_command(client: Client, message: Message):
    """Handle /uset command."""
    try:
        # Check if user is admin
        if not await is_admin(message.from_user.id):
            await message.reply_text(
                "‚ùå **‡¶Ö‡¶®‡¶®‡ßÅ‡¶Æ‡ßã‡¶¶‡¶ø‡¶§ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏!**\n\n"
                "‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶è‡¶á ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®‡•§"
            )
            return
            
        # Show settings with status
        await message.reply_text(
            "‚öôÔ∏è **‡¶¨‡¶ü ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏**\n\n" +
            await get_settings_status() + "\n\n"
            "‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶¨‡¶æ‡¶ü‡¶®‡¶ó‡ßÅ‡¶≤‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®:",
            reply_markup=await get_settings_keyboard()
        )
            
    except Exception as e:
        await message.reply_text(f"‚ùå **‡¶è‡¶∞‡¶∞!**\n\n{str(e)}")

async def settings_callback(client: Client, callback: CallbackQuery):
    """Handle settings callbacks."""
    try:
        # Check if user is admin
        if not await is_admin(callback.from_user.id):
            await callback.answer(
                "‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶è‡¶á ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®‡•§",
                show_alert=True
            )
            return
            
        # Handle reset all
        if callback.data == "reset_all":
            await settings_collection.update_one(
                {"_id": "bot_settings"},
                {"$unset": {
                    "whatsapp_template": "",
                    "number_template": "",
                    "text_template": "",
                    "welcome_text": "",
                    "welcome_time": "",
                    "welcome_msg": "",
                    "service_delete": "",
                    "link_filter": ""
                }},
                upsert=True
            )
            await callback.answer("‡¶∏‡¶¨ ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏ ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!", show_alert=True)

        # Handle set welcome message
        elif callback.data == "set_welcome":
            await callback.message.edit_text(
                "‚úèÔ∏è **‡¶ì‡¶Ø‡¶º‡ßá‡¶≤‡¶ï‡¶æ‡¶Æ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®**\n\n"
                "‡¶®‡¶§‡ßÅ‡¶® ‡¶ì‡¶Ø‡¶º‡ßá‡¶≤‡¶ï‡¶æ‡¶Æ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡•§\n\n"
                "**‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß ‡¶≠‡ßç‡¶Ø‡¶æ‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶¨‡¶≤:**\n"
                "‚Ä¢ {mention} - ‡¶Æ‡ßá‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞‡ßá‡¶∞ ‡¶Æ‡ßá‡¶®‡¶∂‡¶®\n"
                "‚Ä¢ {title} - ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ\n"
                "‚Ä¢ {count} - ‡¶Æ‡ßã‡¶ü ‡¶Æ‡ßá‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞\n"
                "‚Ä¢ {first} - ‡¶Æ‡ßá‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ\n"
                "‚Ä¢ {last} - ‡¶Æ‡ßá‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞‡ßá‡¶∞ ‡¶∂‡ßá‡¶∑ ‡¶®‡¶æ‡¶Æ\n"
                "‚Ä¢ {username} - ‡¶Æ‡ßá‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞‡ßá‡¶∞ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶®‡ßá‡¶Æ\n\n"
                "**‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:**\n"
                "‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ {mention}!\n"
                "{title} ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ‡•§\n"
                "‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶Æ‡ßã‡¶ü ‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø {count} ‡¶ú‡¶®‡•§\n\n"
                "‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶§‡ßá /cancel ‡¶ü‡¶æ‡¶á‡¶™ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô ‡¶´‡¶ø‡¶∞‡ßá ‡¶Ø‡¶æ‡¶®", callback_data="back")]
                ])
            )
            
            # Set user state
            await settings_collection.update_one(
                {"_id": f"state_{callback.from_user.id}"},
                {"$set": {"waiting_for": "welcome_text"}},
                upsert=True
            )
            return

        # Handle set whatsapp template
        elif callback.data == "set_whatsapp":
            await callback.message.edit_text(
                "üìù **WhatsApp ‡¶ü‡ßá‡¶Æ‡¶™‡ßç‡¶≤‡ßá‡¶ü ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®**\n\n"
                "‡¶¶‡¶ø‡¶ö‡ßá‡¶∞ ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡ßá ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®:\n"
                "`‡¶ï‡ßÄ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶°‡ßß,‡¶ï‡ßÄ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶°‡ß® | ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞`\n\n"
                "‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:\n"
                "`whatsapp,wp,Ÿàÿßÿ™ÿ≥ | 8801234567890`\n\n"
                "‚Ä¢ ‡¶ï‡¶Æ‡¶æ ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶è‡¶ï‡¶æ‡¶ß‡¶ø‡¶ï ‡¶ï‡ßÄ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶¶‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®\n"
                "‚Ä¢ | ‡¶ö‡¶ø‡¶π‡ßç‡¶®‡ßá‡¶∞ ‡¶™‡¶∞ ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶¶‡¶ø‡¶¨‡ßá‡¶®\n"
                "‚Ä¢ ‡¶¨‡¶ü ‡¶®‡¶ø‡¶ú‡ßá‡¶á ‡¶ï‡ßÅ‡¶®‡ßç‡¶¶‡¶∞ ‡¶¨‡¶æ‡¶ü‡¶® ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶¨‡ßá\n\n"
                "‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶§‡ßá /cancel ‡¶ü‡¶æ‡¶á‡¶™ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô ‡¶´‡¶ø‡¶∞‡ßá ‡¶Ø‡¶æ‡¶®", callback_data="back")]
                ])
            )
            
            # Set user state
            await settings_collection.update_one(
                {"_id": f"state_{callback.from_user.id}"},
                {"$set": {"waiting_for": "whatsapp_template"}},
                upsert=True
            )
            return

        # Handle set number template
        elif callback.data == "set_number":
            await callback.message.edit_text(
                "üìû **‡¶®‡¶≤ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®**\n\n"
                "‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡ßá ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®:\n"
                "`‡¶ï‡ßÄ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶°‡ßß,‡¶ï‡ßÄ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶°‡ß® | ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞`\n\n"
                "‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:\n"
                "`number,phone,‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞,‡¶´‡ßã‡¶® | 01234567890`\n\n"
                "‚Ä¢ ‡¶ï‡¶Æ‡¶æ ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶è‡¶ï‡¶æ‡¶ß‡¶ø‡¶ï ‡¶ï‡ßÄ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶¶‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®\n"
                "‚Ä¢ | ‡¶ö‡¶ø‡¶π‡ßç‡¶®‡ßá‡¶∞ ‡¶™‡¶∞ ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶¶‡¶ø‡¶¨‡ßá‡¶®\n"
                "‚Ä¢ ‡¶¨‡¶ü ‡¶®‡¶ø‡¶ú‡ßá‡¶á ‡¶ï‡¶≤ ‡¶¨‡¶æ‡¶ü‡¶® ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶¨‡ßá\n\n"
                "‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶§‡ßá /cancel ‡¶ü‡¶æ‡¶á‡¶™ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô ‡¶´‡¶ø‡¶∞‡ßá ‡¶Ø‡¶æ‡¶®", callback_data="back")]
                ])
            )
            
            # Set user state
            await settings_collection.update_one(
                {"_id": f"state_{callback.from_user.id}"},
                {"$set": {"waiting_for": "number_template"}},
                upsert=True
            )
            return

        # Handle set text template
        elif callback.data == "set_text":
            await callback.message.edit_text(
                "‚úâÔ∏è **‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶ü‡ßá‡¶Æ‡¶™‡ßç‡¶≤‡ßá‡¶ü ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®**\n\n"
                "‡¶¶‡¶Ø‡¶ö‡ßá‡¶∞ ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡ßá ‡¶ü‡ßá‡¶Æ‡¶™‡ßç‡¶≤‡ßá‡¶ü ‡¶™‡¶æ‡¶†‡¶æ‡¶®:\n"
                "`‡¶ï‡ßÄ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶°‡ßß,‡¶ï‡ßÄ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶°‡ß® | ‡¶ü‡ßá‡¶Æ‡¶™‡ßç‡¶≤‡ßá‡¶ü/‡¶≤‡¶ø‡¶Ç‡¶ï`\n\n"
                "‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:\n"
                "`text,message,‡¶Æ‡ßá‡¶∏‡ßá‡¶ú | ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶Ø‡ßã‡¶ó ‡¶¶‡¶ø‡¶®: @groupname`\n\n"
                "‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶§‡ßá /cancel ‡¶ü‡¶æ‡¶á‡¶™ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô ‡¶´‡¶ø‡¶∞‡ßá ‡¶Ø‡¶æ‡¶®", callback_data="back")]
                ])
            )
            
            # Set user state
            await settings_collection.update_one(
                {"_id": f"state_{callback.from_user.id}"},
                {"$set": {"waiting_for": "text_template"}},
                upsert=True
            )
            return
            
        # Handle back button
        elif callback.data == "back":
            # Clear user state
            await settings_collection.delete_one({"_id": f"state_{callback.from_user.id}"})
            
        # Handle link filter toggle
        elif callback.data == "link_filter":
            settings = await settings_collection.find_one({"_id": "bot_settings"}) or {}
            current = not settings.get("link_filter", False)
            await settings_collection.update_one(
                {"_id": "bot_settings"},
                {"$set": {"link_filter": current}},
                upsert=True
            )
            
        # Handle welcome message toggle
        elif callback.data == "welcome_msg":
            settings = await settings_collection.find_one({"_id": "bot_settings"}) or {}
            current = not settings.get("welcome_msg", False)
            await settings_collection.update_one(
                {"_id": "bot_settings"},
                {"$set": {"welcome_msg": current}},
                upsert=True
            )
            
        # Handle welcome time
        elif callback.data == "welcome_time":
            settings = await settings_collection.find_one({"_id": "bot_settings"}) or {}
            current = int(settings.get("welcome_time", 60))
            
            # Cycle through options: 30, 60, 120, 300 seconds
            if current == 30:
                new_time = 60
            elif current == 60:
                new_time = 120  
            elif current == 120:
                new_time = 300
            else:
                new_time = 30
                
            await settings_collection.update_one(
                {"_id": "bot_settings"},
                {"$set": {"welcome_time": new_time}},
                upsert=True
            )
            
        # Handle service message delete toggle
        elif callback.data == "service_delete":
            settings = await settings_collection.find_one({"_id": "bot_settings"}) or {}
            current = not settings.get("service_delete", False)
            await settings_collection.update_one(
                {"_id": "bot_settings"},
                {"$set": {"service_delete": current}},
                upsert=True
            )
            
        # Handle close button
        elif callback.data == "close":
            await callback.message.delete()
            return

        # Update message with new settings
        text = "‚öôÔ∏è **‡¶¨‡¶ü ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏**\n\n" + await get_settings_status() + "\n\n" + "‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶¨‡¶æ‡¶ü‡¶®‡¶ó‡ßÅ‡¶≤‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®:"
        markup = await get_settings_keyboard()
        
        try:
            if text != callback.message.text or markup != callback.message.reply_markup:
                await callback.message.edit_text(text, reply_markup=markup)
            else:
                await callback.answer()
        except Exception as e:
            print(f"Error updating message: {str(e)}")
            await callback.answer()
            
    except Exception as e:
        await callback.answer(f"‡¶è‡¶∞‡¶∞: {str(e)}", show_alert=True)

# Message handler for welcome text
@Client.on_message(filters.private & ~filters.command("cancel"))
async def handle_welcome_text(client: Client, message: Message):
    """Handle welcome text input."""
    try:
        # Check if waiting for welcome text
        state = await settings_collection.find_one({"_id": f"state_{message.from_user.id}"})
        if not state:
            return
            
        waiting_for = state.get("waiting_for")
        if not waiting_for:
            return
            
        if waiting_for == "welcome_text":
            # Save welcome text
            await settings_collection.update_one(
                {"_id": "bot_settings"},
                {"$set": {"welcome_text": message.text}},
                upsert=True
            )
        elif waiting_for == "whatsapp_template":
            # Save whatsapp template
            await settings_collection.update_one(
                {"_id": "bot_settings"},
                {"$set": {"whatsapp_template": message.text}},
                upsert=True
            )
        elif waiting_for == "number_template":
            # Save number template
            await settings_collection.update_one(
                {"_id": "bot_settings"},
                {"$set": {"number_template": message.text}},
                upsert=True
            )
        elif waiting_for == "text_template":
            # Save text template
            await settings_collection.update_one(
                {"_id": "bot_settings"},
                {"$set": {"text_template": message.text}},
                upsert=True
            )
        else:
            return
            
        # Clear user state
        await settings_collection.delete_one({"_id": f"state_{message.from_user.id}"})
        
        # Show success message
        text = "‚úÖ **‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!**\n\n" + await get_settings_status()
        markup = await get_settings_keyboard()
        
        try:
            await message.reply_text(text, reply_markup=markup)
        except Exception as e:
            print(f"Error sending success message: {str(e)}")
            await message.reply_text("‚úÖ ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!")
            
    except Exception as e:
        await message.reply_text(f"‚ùå **‡¶è‡¶∞‡¶∞!**\n\n{str(e)}")

# Add new message handler for username
@Client.on_message(filters.private & ~filters.command("cancel"))
async def handle_username_text(client: Client, message: Message):
    """Handle username text input."""
    try:
        # Check if waiting for username
        state = await settings_collection.find_one({"_id": f"state_{message.from_user.id}"})
        if not state or state.get("waiting_for") != "group_username":
            return
            
        # Remove @ if present
        username = message.text.replace("@", "").strip()
        
        # Save username
        await settings_collection.update_one(
            {"_id": "bot_settings"},
            {"$set": {"group_username": username}},
            upsert=True
        )
        
        # Clear user state
        await settings_collection.delete_one({"_id": f"state_{message.from_user.id}"})
        
        # Show success message
        await message.reply_text(
            "‚úÖ **‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶®‡ßá‡¶Æ ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!**",
            reply_markup=await get_settings_keyboard()
        )
            
    except Exception as e:
        await message.reply_text(f"‚ùå **‡¶è‡¶∞‡¶∞!**\n\n{str(e)}")

async def groupon_command(client: Client, message: Message):
    """Handle /groupon command."""
    try:
        # Check if user is admin
        if not await is_admin(message.from_user.id):
            await message.reply_text(
                "‚ùå **‡¶Ö‡¶®‡¶®‡ßÅ‡¶Æ‡ßã‡¶¶‡¶ø‡¶§ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏!**\n\n"
                "‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶è‡¶á ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®‡•§"
            )
            return

        # Check if bot is admin in group
        chat_member = await message.chat.get_member("me")
        if not chat_member.privileges.can_delete_messages:
            await message.reply_text(
                "‚ùå **‡¶¨‡¶ü ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶®‡¶Ø‡¶º!**\n\n"
                "‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶¨‡¶ü‡¶ï‡ßá ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶™‡¶æ‡¶∞‡¶Æ‡¶ø‡¶∂‡¶®‡¶ó‡ßÅ‡¶≤‡¶ø ‡¶¶‡¶ø‡¶®:\n"
                "‚Ä¢ Delete messages\n"
                "‚Ä¢ Ban users\n"
                "‚Ä¢ Add new admins\n"
                "‚Ä¢ Manage group"
            )
            return

        # Activate bot
        await settings_collection.update_one(
            {"_id": "bot_settings"},
            {"$set": {"is_active": True}},
            upsert=True
        )
        
        await message.reply_text(
            "‚úÖ **‡¶¨‡¶ü ‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!**\n\n"
            "‡¶è‡¶ñ‡¶® ‡¶•‡ßá‡¶ï‡ßá ‡¶¨‡¶ü ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶æ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶¨‡ßá‡•§\n"
            "‚Ä¢ ‡¶ì‡¶Ø‡¶º‡ßá‡¶≤‡¶ï‡¶æ‡¶Æ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá\n"
            "‚Ä¢ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶¨‡ßá\n"
            "‚Ä¢ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶´‡¶ø‡¶≤‡ßç‡¶ü‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶¨‡ßá"
        )
            
    except Exception as e:
        await message.reply_text(f"‚ùå **‡¶è‡¶∞‡¶∞!**\n\n{str(e)}")

async def groupoff_command(client: Client, message: Message):
    """Handle /groupoff command."""
    try:
        # Check if user is admin
        if not await is_admin(message.from_user.id):
            await message.reply_text(
                "‚ùå **‡¶Ö‡¶®‡¶®‡ßÅ‡¶Æ‡ßã‡¶¶‡¶ø‡¶§ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏!**\n\n"
                "‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶è‡¶á ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®‡•§"
            )
            return

        # Deactivate bot
        await settings_collection.update_one(
            {"_id": "bot_settings"},
            {"$set": {"is_active": False}},
            upsert=True
        )
        
        await message.reply_text(
            "‚ùå **‡¶¨‡¶ü ‡¶®‡¶ø‡¶∑‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!**\n\n"
            "‡¶è‡¶ñ‡¶® ‡¶•‡ßá‡¶ï‡ßá ‡¶¨‡¶ü ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶ï‡ßã‡¶® ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶¨‡ßá ‡¶®‡¶æ‡•§\n"
            "‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡¶§‡ßá /groupon ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¶‡¶ø‡¶®‡•§"
        )
            
    except Exception as e:
        await message.reply_text(f"‚ùå **‡¶è‡¶∞‡¶∞!**\n\n{str(e)}")

# Add new function to check if bot is active
async def is_bot_active():
    """Check if bot is active in group."""
    settings = await settings_collection.find_one({"_id": "bot_settings"}) or {}
    return settings.get('is_active', False)

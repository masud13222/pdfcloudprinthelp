from pyrogram import Client, filters
from pyrogram.types import Message
import os
import pikepdf
import time
import humanize
import asyncio
from typing import List, Dict
import sys

# Import helpers
from .downloads import create_user_dir, cleanup_user_dir, DOWNLOAD_DIR
from .progress import update_progress, edit_or_reply, cleanup_status
from .db import start_process, end_process, is_process_running, get_user_process

# Constants
MAX_FILES = 20  # Maximum number of files
MAX_FILE_SIZE = 100 * 1024 * 1024  # 100MB per file
MAX_MERGED_SIZE = 1024 * 1024 * 1024  # 1GB merged file
UPDATE_INTERVAL = 5  # Update progress every 5 seconds

sys.setrecursionlimit(10000)  # Increase recursion limit

# Store PDF files for each user
pdf_files_store: Dict[int, List['PDFFile']] = {}
required_files_store: Dict[int, int] = {}

# Type for storing PDF file info
class PDFFile:
    def __init__(self, message: Message, name: str, size: int):
        self.message = message
        self.name = name 
        self.size = size
        self.path = ""

async def get_status_text(
    user_id: int,
    current=0,
    total=0,
    start_time=None,
    file_num=None,
    total_files=None,
    status="waiting"
) -> str:
    """Generate status message text."""
    if status == "waiting":
        files_received = len(pdf_files_store.get(user_id, []))
        files_remaining = required_files_store.get(user_id, 0) - files_received
        return (
            f"ЁЯУС **PDF рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕**\n\n"
            f"тАв ржЧрзГрж╣рзАржд: {files_received}ржЯрж┐ PDF\n"
            f"тАв ржмрж╛ржХрж┐: {files_remaining}ржЯрж┐ PDF\n"
            "тАв ржЕржкрзЗржХрзНрж╖ржорж╛ржи..."
        )
    
    if status == "merging":
        return "ЁЯФД **PDF ржлрж╛ржЗрж▓ржЧрзБрж▓рж┐ ржПржХрждрзНрж░рж┐ржд ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...**"
    
    if status == "uploading":
        return "ЁЯУд **ржПржХрждрзНрж░рж┐ржд PDF ржлрж╛ржЗрж▓ ржкрж╛ржарж╛ржирзЛ рж╣ржЪрзНржЫрзЗ...**"
        
    if status == "downloading":
        return f"ЁЯУе **ржбрж╛ржЙржирж▓рзЛржб рж╣ржЪрзНржЫрзЗ: {file_num}/{total_files}**"
    
    return "тП│ **ржкрзНрж░рж╕рзЗрж╕ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...**"

async def merge_command(client: Client, message: Message):
    """Handle /merge command."""
    try:
        user_id = message.from_user.id
        
        # Check if already processing
        if await is_process_running(user_id):
            await message.reply_text(
                "тЭМ **ржПржХржЯрж┐ ржкрзНрж░рж╕рзЗрж╕ ржЪрж▓ржорж╛ржи ржЖржЫрзЗ!**\n\n"
                "ржжржпрж╝рж╛ ржХрж░рзЗ ржЖржЧрзЗрж░ ржкрзНрж░рж╕рзЗрж╕ рж╢рзЗрж╖ рж╣ржУржпрж╝рж╛ ржкрж░рзНржпржирзНржд ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рзБржи,\n"
                "ржЕржержмрж╛ /allcancel ржХржорж╛ржирзНржб ржжрж┐ржпрж╝рзЗ ржмрж░рзНрждржорж╛ржи ржкрзНрж░рж╕рзЗрж╕ ржмрж╛рждрж┐рж▓ ржХрж░рзБржиред"
            )
            return
        
        # Get number of PDFs to merge
        cmd = message.text.split()
        if len(cmd) != 2:
            await message.reply_text(
                "ЁЯУЪ **PDF ржорж╛рж░рзНржЬрж╛рж░ - ржмрзНржпржмрж╣рж╛рж░ ржирж┐рж░рзНржжрзЗрж╢рж┐ржХрж╛**\n\n"
                "**ржХржорж╛ржирзНржб:** `/merge рж╕ржВржЦрзНржпрж╛`\n"
                "**ржЙржжрж╛рж╣рж░ржг:** `/merge 3`\n\n"
                "**ржмрзНржпржмрж╣рж╛рж░ ржкржжрзНржзрждрж┐:**\n"
                "1я╕ПтГг ржкрзНрж░ржержорзЗ /merge рж▓рж┐ржЦрзБржи, рждрж╛рж░ржкрж░ рж╕рзНржкрзЗрж╕ ржжрж┐ржпрж╝рзЗ ржХрждржЧрзБрж▓рзЛ PDF ржорж╛рж░рзНржЬ ржХрж░ржмрзЗржи рж╕рзЗржЗ рж╕ржВржЦрзНржпрж╛ рж▓рж┐ржЦрзБржи\n"
                "2я╕ПтГг ржХржорж╛ржирзНржб ржкрж╛ржарж╛ржирзЛрж░ ржкрж░ ржмржЯ ржЖржкржирж╛рж░ PDF ржлрж╛ржЗрж▓ ржЧрзБрж▓рзЛ ржЪрж╛ржЗржмрзЗ\n"
                "3я╕ПтГг ржПржХрзЗ ржПржХрзЗ рж╕ржм PDF ржлрж╛ржЗрж▓ ржкрж╛ржарж┐ржпрж╝рзЗ ржжрж┐ржи\n"
                "4я╕ПтГг рж╕ржм ржлрж╛ржЗрж▓ ржкрж╛ржарж╛ржирзЛ рж╣ржпрж╝рзЗ ржЧрзЗрж▓рзЗ ржмржЯ ржЖржкржирж╛ржХрзЗ ржПржХржЯрж┐ ржорж╛рж░рзНржЬ ржХрж░рж╛ PDF ржжрж┐ржмрзЗ\n\n"
                "**рж╕рзАржорж╛ржмржжрзНржзрждрж╛:**\n"
                f"тАв рж╕рж░рзНржмрзЛржЪрзНржЪ {MAX_FILES}ржЯрж┐ PDF ржПржХрж╕рж╛ржерзЗ ржорж╛рж░рзНржЬ ржХрж░рж╛ ржпрж╛ржмрзЗ\n"
                f"тАв ржкрзНрж░рждрж┐ржЯрж┐ PDF ржлрж╛ржЗрж▓ {humanize.naturalsize(MAX_FILE_SIZE)} ржПрж░ ржоржзрзНржпрзЗ рж╣рждрзЗ рж╣ржмрзЗ\n"
                f"тАв ржорж╛рж░рзНржЬ ржХрж░рж╛ ржлрж╛ржЗрж▓рзЗрж░ рж╕рж╛ржЗржЬ {humanize.naturalsize(MAX_MERGED_SIZE)} ржПрж░ ржмрзЗрж╢рж┐ рж╣рждрзЗ ржкрж╛рж░ржмрзЗ ржирж╛\n\n"
                "**ржЕрждрж┐рж░рж┐ржХрзНржд ржХржорж╛ржирзНржб:**\n"
                "тАв /allcancel - ржорж╛рж░рзНржЬ ржкрзНрж░рж╕рзЗрж╕ ржмрж╛рждрж┐рж▓ ржХрж░рждрзЗ\n\n"
                "**ржЯрж┐ржкрж╕:**\n"
                "тАв PDF ржлрж╛ржЗрж▓ ржЧрзБрж▓рзЛ ржХрзНрж░ржорж╛ржирзБрж╕рж╛рж░рзЗ ржкрж╛ржарж╛ржмрзЗржи, ржПржХржЗ ржХрзНрж░ржорзЗ ржорж╛рж░рзНржЬ рж╣ржмрзЗ\n"
                "тАв ржорж╛рж░рзНржЬ ржХрж░рж╛рж░ ржЖржЧрзЗ PDF ржлрж╛ржЗрж▓ ржЧрзБрж▓рзЛ ржнрж╛рж▓рзЛржнрж╛ржмрзЗ ржЪрзЗржХ ржХрж░рзЗ ржирж┐ржи\n\n"
                "**ЁЯУ║ ржЯрж┐ржЙржЯрзЛрж░рж┐ржпрж╝рж╛рж▓ ржжрзЗржЦрзБржи:**\n"
                "тАв https://www.youtube.com/shorts/ejnbUV0X9t0"
            )
            return
        
        num_pdfs = int(cmd[1])
        if num_pdfs <= 1:
            await message.reply_text("тЭМ ржХржоржкржХрзНрж╖рзЗ рзиржЯрж┐ PDF ржлрж╛ржЗрж▓ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржиред")
            return
            
        if num_pdfs > MAX_FILES:
            await message.reply_text(f"тЭМ рж╕рж░рзНржмрзЛржЪрзНржЪ {MAX_FILES}ржЯрж┐ PDF ржлрж╛ржЗрж▓ ржПржХрждрзНрж░рж┐ржд ржХрж░рж╛ ржпрж╛ржмрзЗред")
            return
            
        # Start tracking process
        await start_process(user_id, "merge", time.time())
        
        # Initialize empty list for PDF files
        pdf_files_store[user_id] = []
        required_files_store[user_id] = num_pdfs
        
        await message.reply_text(
            f"ЁЯУе **{num_pdfs}ржЯрж┐ PDF ржлрж╛ржЗрж▓ ржкрж╛ржарж╛ржи**\n\n"
            f"тАв ржкрзНрж░рждрж┐ржЯрж┐ ржлрж╛ржЗрж▓ рж╕рж╛ржЗржЬ: {humanize.naturalsize(MAX_FILE_SIZE)} ржПрж░ ржоржзрзНржпрзЗ рж╣рждрзЗ рж╣ржмрзЗ\n"
            "тАв /allcancel - ржмрж╛рждрж┐рж▓ ржХрж░рждрзЗ"
        )
        
        # Create status message
        status_text = await get_status_text(user_id)
        await edit_or_reply(message, user_id, status_text)
        
    except ValueError:
        await message.reply_text("тЭМ ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржПржХржЯрж┐ ржмрзИржз рж╕ржВржЦрзНржпрж╛ ржжрж┐ржиред")
    except Exception as e:
        await end_process(user_id)
        await message.reply_text(f"тЭМ ржПрж░рж░: {str(e)}")

async def handle_pdf(client: Client, message: Message):
    """Handle incoming PDF files."""
    try:
        user_id = message.from_user.id
        
        # Check if user has active merge process
        process = await get_user_process(user_id)
        if not process or process['process_type'] != 'merge':
            return
            
        # Check if it's a PDF file
        if not message.document or not message.document.file_name.lower().endswith('.pdf'):
            await message.reply_text("тЭМ ржжржпрж╝рж╛ ржХрж░рзЗ ржПржХржЯрж┐ PDF ржлрж╛ржЗрж▓ ржкрж╛ржарж╛ржиред")
            return
        
        if message.document.file_size > MAX_FILE_SIZE:
            await message.reply_text(
                f"тЭМ ржлрж╛ржЗрж▓ рж╕рж╛ржЗржЬ {humanize.naturalsize(MAX_FILE_SIZE)} ржПрж░ ржмрзЗрж╢рж┐ рж╣рждрзЗ ржкрж╛рж░ржмрзЗ ржирж╛ред"
            )
            return
            
        # Create PDF file object
        pdf_file = PDFFile(
            message=message,
            name=message.document.file_name,
            size=message.document.file_size
        )
        
        # Get user directory
        user_dir = create_user_dir(user_id)
        pdf_file.path = os.path.join(user_dir, f"pdf_{len(pdf_files_store[user_id]) + 1}.pdf")
        
        # Download file
        start_time = time.time()
        await message.download(
            pdf_file.path,
            progress=update_progress,
            progress_args=(
                message,
                user_id,
                "ЁЯУе **PDF ржбрж╛ржЙржирж▓рзЛржб ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...**",
                start_time
            )
        )
        
        # Add to list
        pdf_files_store[user_id].append(pdf_file)
        
        # Update status
        if len(pdf_files_store[user_id]) < required_files_store[user_id]:
            status_text = await get_status_text(user_id)
            await edit_or_reply(message, user_id, status_text)
            return
            
        # If all files received, start merging
        await merge_pdfs(message, user_id)
        
    except asyncio.CancelledError:
        await cleanup(user_id)
        raise
    except Exception as e:
        await cleanup(user_id)
        await message.reply_text(f"тЭМ ржПрж░рж░: {str(e)}")

async def merge_pdfs(message: Message, user_id: int):
    """Merge PDF files."""
    try:
        # Update status
        await edit_or_reply(message, user_id, "ЁЯФД **PDF ржлрж╛ржЗрж▓ржЧрзБрж▓рж┐ ржПржХрждрзНрж░рж┐ржд ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...**")
        
        # Create output PDF
        output_path = os.path.join(create_user_dir(user_id), "merged.pdf")
        
        # Merge PDFs
        with pikepdf.Pdf.new() as output_pdf:
            for pdf_file in pdf_files_store[user_id]:
                with pikepdf.Pdf.open(pdf_file.path) as pdf:
                    output_pdf.pages.extend(pdf.pages)
            output_pdf.save(output_path)
        
        # Send merged file
        await edit_or_reply(message, user_id, "ЁЯУд **ржПржХрждрзНрж░рж┐ржд PDF ржлрж╛ржЗрж▓ ржкрж╛ржарж╛ржирзЛ рж╣ржЪрзНржЫрзЗ...**")
        
        start_time = time.time()
        await message.reply_document(
            document=output_path,
            caption=(
                "тЬЕ **PDF ржлрж╛ржЗрж▓ ржПржХрждрзНрж░рж┐ржд ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ!**\n\n"
                f"тАв ржорзЛржЯ ржлрж╛ржЗрж▓: {len(pdf_files_store[user_id])}ржЯрж┐\n"
                f"тАв ржлрж╛ржЗрж▓ рж▓рж┐рж╕рзНржЯ:\n" + 
                "\n".join(f"{i+1}. {pdf.name}" for i, pdf in enumerate(pdf_files_store[user_id]))
            ),
            progress=update_progress,
            progress_args=(
                message,
                user_id,
                "ЁЯУд **ржПржХрждрзНрж░рж┐ржд PDF ржлрж╛ржЗрж▓ ржкрж╛ржарж╛ржирзЛ рж╣ржЪрзНржЫрзЗ...**",
                start_time
            )
        )
        
    finally:
        await cleanup(user_id)

async def cleanup(user_id: int):
    """Clean up after process completion."""
    try:
        await end_process(user_id)
        cleanup_user_dir(user_id)
        await cleanup_status(user_id)
        
        # Clear PDF files store
        if user_id in pdf_files_store:
            del pdf_files_store[user_id]
        if user_id in required_files_store:
            del required_files_store[user_id]
            
    except Exception as e:
        print(f"Cleanup error: {str(e)}")
